*misc.txt*   my plugin user manual

==============================================================================
INTRODUCTION                                                             *misc*

This plugin is a front for the_silver_searcher: my. Ag can be used as a
replacement for ack. This plugin will allow you to run my from vim, and shows
the results in a split window.

|misc-view|
|misc-view-vim|
|misc-view-NERDTree|
|misc-view-airline|
|misc-buffer|
|misc-buffer-vim|
|misc-buffer-ctrlp|
|misc-buffer-mru|
|misc-buffer-bufexplorer|
|misc-buffer-rename|
|misc-move|
|misc-move-vim|
|misc-search|
|misc-search-incsearch|
|misc-search-sneak|
|msic-search-surround|
|misc-complete|
|misc-complete-ycm|
|misc-complete-ultisnips|
|misc-complete-snippets|
|misc-complete-autoclose|
|misc-select|
|misc-select-multiple-cursors|
|misc-select-expand-region|
|misc-format|
|misc-format-autoformat|
|misc-format-easy-align|
|misc-comment|
|misc-comment-commentary|
|misc-git|
|misc-git-gitgtter|
|misc-git-fugitive|
|misc-git-git|
|misc-repeat|





                                                                          *misc-view*
                                                                      *misc-view-vim*
                                                                 *misc-view-NERDTree*
                                                                  *misc-view-airline*


                                                                        *misc-buffer*
                                                                    *misc-buffer-vim*
    map <leader>bd :Bclose<cr>:tabclose<cr>gT  " Close the current buffer
    map <leader>ba :bufdo bd<cr>               " Close all the buffers
    map <leader>bn :bnext<cr>
    map <leader>bp :bprevious<cr>
    map <leader>bf :bfirst<cr>
    map <leader>bl :blast<cr>

                                                                  *misc-buffer-ctrlp*
    |Maps:|                                                                  
    let g:ctrlp_map = '<c-f>'
    map <c-b> :CtrlPBuffer<cr> 
    <c-d>                               
        Toggle between full-path search and filename only search.
    <c-r>                               
        Toggle between the string mode and full regexp mode.
    <tab>
        Auto-complete directory names under the current working directory inside the prompt.
    <esc>, <c-c>, <c-g>
        Exit CtrlP.

    |Moving:|
    <c-j>, <down>
        Move selection down.
    <c-k>, <up>
        Move selection up.

    <c-a>
        Move the cursor to the 'start' of the prompt.
    <c-e>
        Move the cursor to the 'end' of the prompt.

    <c-h>, <left>, <c-^>
        Move the cursor one character to the 'left'. 
        NOTE: secureCRT map <c-h> to <backspace>
    <c-l>, <right>
        Move the cursor one character to the 'right'.

    |Editing:|
    <c-w>
        Delete a preceding inner word.
    <c-u>
        Clear the input field.

    Browsing input history:
    <c-n>
        Next string in the prompt's history.
    <c-p>
        Previous string in the prompt's history.

    |Opening/Creating-file:|
    <cr>
        Open the selected file in the 'current' window if possible.
    <c-t>
        Open the selected file in a new 'tab'.
    <c-v>
        Open the selected file in a 'vertical' split.
    <c-x>, <c-cr>, <c-s>
        Open the selected file in a 'horizontal' split.
    <c-y>                               " Create a new file and its parent directories.
    <F5>
        - Refresh the match window and purge the cache for the current directory.
        - Remove deleted files from the MRU list.
    <F7>
        MRU mode:
        - Wipe the list.
        - Delete entries marked by <c-z>.
        Buffer mode:
        - Delete entry under the cursor or delete multiple entries marked by <c-z>.

                                                                    *misc-buffer-mru*
                                                            *misc-buffer-bufexplorer*
                                                                 *misc-buffer-rename*
                                                                          *misc-move*


                                                                      *misc-move-vim*
     
        w
        b
        e               光标以单词向前移动, ne光标向前移动n个单词, 光标到单词的最后一个字母上
        ge              与e相反 
        $,n$
        fx,nfx          右移动到指定的字符X上
        Fx,nFx          左移动到指定的字符X上
        ngg,ng
        H,M,L			"h"意为Home,Middle,Last	
        ^				将光标移动到行首
        0				将光标移动到行首(顶格)
        g0              将光标移动到第0列
        CTRL-G			告诉你当前的位置
        ``				两点之间来回跳转
        CTRL-O			跳转到更早时间光标的位置
        CTRL-I,<tab>	跳回到后来的更新的位置
        CTRL-]			转到当前光标之下的那个word所对应的链接中(查看help时)
        CTRL-T			(弹出标签)可以回到前一个位置,CTRL-O(跳转到较早的位置)也可以
        '1				回到你上次退出时的位置

    |in-code-bolcok|
        %				匹配一个括号      (#ifdef #else #endif)之间跳转
        [#				在"#if"-"#endif"结构的中间某个地方时,跳转到此结构的结束元素
        ]#				在"#if"-"#endif"结构的中间某个地方时,跳转到此结构的开始元素
        [[				移动到一个代码块的开头
        ][				移动到一个代码块的末尾
        [{				跳转到当前代码块的开头
        ]}				跳转到当前代码块的末尾
        []				查找上一个函数的结尾
        ]]				查找下一个函数的开始

    |in-comment| 
        [/				移动到注释的开头(这只对/* -       */形式的注释有效)
        ]/				移动到注释的末尾

                                                                        *misc-search*
                                                              *misc-search-incsearch*

                                                                  *misc-search-sneak*

    Key Sequence             | Description
    -------------------------|----------------------------------------------
    f{char}{char}            | Go to the next occurrence of {char}{char}
    F{char}{char}            | Go to the previous occurrence of {char}{char}
    f{char}<Enter>           | Go to the next occurrence of {char}
    F{char}<Enter>           | Go to the previous occurrence of {char}
    f<Enter>                 | Repeat the last Sneak.
    F<Enter>                 | Repeat the last Sneak, in reverse direction.
    ;                        | Go to the [count]th next match
    , or \                   | Go to the [count]th previous match
    f                        | Go to the [count]th next match (see NOTE)
    F                        | Go to the [count]th previous match (see NOTE)
    [count]f{char}{char}     | Invoke |sneak-vertical-scope|
    [count]F{char}{char}     | Invoke backwards |sneak-vertical-scope|
    {operator}z{char}{char}  | Perform {operator} from the cursor to the next
                             | occurrence of {char}{char}
    {operator}Z{char}{char}  | Perform {operator} from the cursor to the 
                             | previous occurrence of {char}{char}
                                                               *msic-search-surround*
                                                                      *misc-complete*
                                                                  *misc-complete-ycm*

                                                            *misc-complete-ultisnips*
>
    let g:UltiSnipsExpandTrigger="<c-l>"
    let g:UltiSnipsJumpForwardTrigger="<c-j>"
    let g:UltiSnipsJumpBackwardTrigger="<c-k>"
<
    " If you want :UltiSnipsEdit to split your window.
>
    let g:UltiSnipsEditSplit="vertical"
<     

    Key Sequence              | Map 
    ------------------------- | ----------------------------------------------
                            *misc-ultisnips-cmment*
    mc                        | /* comment */
    ------------------------- | ----------------------------------------------
    mm                        | /**< comment */
    ------------------------- | ----------------------------------------------
    mb                        | /**
                              | * comment
                              | */
    ------------------------- | ----------------------------------------------

                             *misc-ultisnips-date*
    date                      | 2017/4/9
    ------------------------- | ----------------------------------------------
    datetime                  | 2017/4/9   10:37
    ------------------------- | ----------------------------------------------
    ddate                     | 9-Apr-17
    ------------------------- | ----------------------------------------------
    diso                      | 2017-04-09 10:38:27+0800
    ------------------------- | ----------------------------------------------
    time                      | 10:39
    ------------------------- | ----------------------------------------------
    modeline                  | vim:set et sw=4 ts=4 tw=500:
    ------------------------- | ----------------------------------------------
    todo                      | /* TODO: <09-04-17, yourname> */
    ------------------------- | ----------------------------------------------
                            *misc-ultisnips-preprocessor*
    ------------------------- | ----------------------------------------------
    def                       | #define
    ------------------------- | ----------------------------------------------
    inc/incc                  | #include <stdio.h>
    ------------------------- | ----------------------------------------------
    Inc                       | #include "test.h"
    ------------------------- | ----------------------------------------------
    binc                      | #include <boost/shared_ptr.hpp>
    ------------------------- | ----------------------------------------------
    ndef/#ifndef              | #ifndef SYMBOL
                              | #define SYMBOL value
                              | #endif /* ifndef SYMBOL */
    ------------------------- | ----------------------------------------------
    once                      | #ifndef SYS_H_3JMLDD79
                              | #define SYS_H_3JMLDD79
                              | #endif /* end of include guard: SYS_H_3JMLDD79 */
    ------------------------- | ----------------------------------------------
    #if                       | #if 0

                              | #endif
    ------------------------- | ----------------------------------------------
    ifdef                     | #ifdef FOO
                              | #define
                              | #endif

                             *misc-ultisnips-contrl*
    if                        | if (true) {
         
                              | }
    ------------------------- | ----------------------------------------------
    ife                       | if (true) {
           
                              | } else {
           
                              | }
    ------------------------- | ----------------------------------------------
    el                        | else {
           
                              | }
    ------------------------- | ----------------------------------------------
    eli                       | else if (/* condition */) {
           
                              | }
    ------------------------- | ----------------------------------------------
    elif                      | else if (true) {
           
                              | }
    ------------------------- | ----------------------------------------------
    t                         | /* condition */ ? a : b
    ------------------------- | ----------------------------------------------
    switch                    | switch (/* variable */) {
                              | case /* variable case */:
               
                              | break;
                              | default:
               
                              | }
    ------------------------- | ----------------------------------------------
    switchndef                | switch (/* variable */) {
                              | case /* variable case */:
               
                              | break;
                              | }
    ------------------------- | ----------------------------------------------
    case                      | case /* variable case */:
           
                              | break
    ------------------------- | ----------------------------------------------
    
                             *misc-ultisnips-loops*
    for                       | for (i = 0; i < count; ++i) {
         
                              | }
    ------------------------- | ----------------------------------------------
    fori                      | for (int i = 0; i < count; ++i) {
          
                              | }
    ------------------------- | ----------------------------------------------
    forr                      | for (int i = 0; i < 10; i++) {
           
                              | }
    ------------------------- | ----------------------------------------------
    fore                      | for (auto i : container) {
           
                              | }
    ------------------------- | ----------------------------------------------
    wh                        | while (/* condition */) {
                              | }
    ------------------------- | ----------------------------------------------
                            *misc-ultisnips-function*
    ------------------------- | ----------------------------------------------
    fnc                       | /**
                              | * @brief: brief
                              | *
                              | * @param: param
                              | *
                              | * @return: ReturnType
                              | */
                              | ReturnType FunctionName(param)
                              | {
                              | FunctionBody
                              | }
    ------------------------- | ----------------------------------------------
    fun                       | void function_name()
                              | {
           
                              | }
    ------------------------- | ----------------------------------------------
    fund                      | void function_name();
    ------------------------- | ----------------------------------------------
    fun1                      | void function_name(Type Parameter)
                              | {
           
                              | }
    ------------------------- | ----------------------------------------------
    fun2                      | void function_name(Type Parameter, Type Parameter)
                              | {
           
                              | }
    ------------------------- | ----------------------------------------------
    fun3                      | void function_name(Type Parameter, Type Parameter, Type Parameter)
                              | {
           
                              | }
    ------------------------- | ----------------------------------------------
    dfun0                     | /*! \brief Brief function description here
                              | *
                              | *  Detailed description of the function
                              | *
                              | * \return Return parameter description
                              | */
                              | void function_name()
                              | {
           
                              | }
    ------------------------- | ----------------------------------------------
    dfun1~3                   | /*! \brief Brief function description here
                              | *
                              | *  Detailed description of the function
                              | *
                              | * \param Parameter Parameter description
                              | * \return Return parameter description
                              | */
                              | void function_name(Type Parameter)
                              | {
           
                              | }
    ------------------------- | ----------------------------------------------
    dmfun0~2                  | /*! \brief Brief function description here
                              | *
                              | *  Detailed description
                              | *
                              | * \return Return parameter description
                              | */
                              | void test::memberFunction() {
           
                              | }
    ------------------------- | ----------------------------------------------

                              *misc-ultisnips-stl*
    ------------------------- | ----------------------------------------------
    tp                        | template <typename _InputIter>
    ------------------------- | ----------------------------------------------
    vector                    | std::vector<char> v;
    ------------------------- | ----------------------------------------------
    array                     | std::array<T, N> ;
    ------------------------- | ----------------------------------------------
    deque                     | std::deque<T> ;
    ------------------------- | ----------------------------------------------
    list                      | std::list<T> ;
    ------------------------- | ----------------------------------------------
    map                       | std::map<key, value> map;
    ------------------------- | ----------------------------------------------
    iter                      | for (std::vector<type>::const_iterator i = container.begin(); i != container.end(); ++i) {
           
                              | }
    ------------------------- | ----------------------------------------------
    itera                     | for (auto i = container.begin(); i != container.end(); ++i) {
                              | std::cout << *i << std::endl;
                              | }
    ------------------------- | ----------------------------------------------
    beginend                  | v.begin(), v.end()
    ------------------------- | ----------------------------------------------
    
                            *misc-ultisnips-access*
    ------------------------- | ----------------------------------------------
    pri                       | private
    pro                       | protected
    pub                       | public
    fri                       | friend
    ------------------------- | ----------------------------------------------
        
                            *misc-ultisnips-class*
    ------------------------- | ----------------------------------------------
    cl                        | class test
                              | {
                              | public:
                              | test (arguments);
                              | virtual ~test ();
       
                              | private:
                              | /* data */
                              | };
    ------------------------- | ----------------------------------------------
    cla                       | #ifndef TEST_H
                              | #define TEST_H
       
                              | class Test
                              | {
                              | private:
           
       
                              | public:
                              | Test();
                              | virtual ~Test();
                              | };
       
                              | #endif /* TEST_H */
    ------------------------- | ----------------------------------------------
    ns                        | namespace test
                              | {
           
                              | } /* test *
    ------------------------- | ----------------------------------------------
    td                        | typedef int MyCustomType;
    ------------------------- | ----------------------------------------------
    st                        | struct test_t {
                              | /* data */
                              | };
    ------------------------- | ----------------------------------------------
    readfile                  | std::vector<char> v;
                              | if (FILE *fp = fopen("filename", "r")){
                              | char buf[1024];
                              | while(size_t len = fread(buf, 1, sizeof(buf), fp))
                              | v.insert(v.end(), buf, buf + len);
                              | fclose(fp);
                              | }
    ------------------------- | ----------------------------------------------
        
                                *misc-ultisnips-in/out*
    ------------------------- | ----------------------------------------------
    cout                      | std::cout <<  << std::endl;
    ------------------------- | ----------------------------------------------
    cin                       | std::cin >> ;
        
    ------------------------- | ----------------------------------------------
    try                       | try {
           
                              | }catch() {
           
                              | }
    ------------------------- | ----------------------------------------------
    main                      | int main(int argc, char *argv[])
                              | {
         
                              | return 0;
                              | }
        
    ------------------------- | ----------------------------------------------
    printf                    | printf(%s\n, );
        
    ------------------------- | ----------------------------------------------
        
    box                       | /*************
                              | *  content  *
                              | *************/
    ------------------------- | ----------------------------------------------

                                                         *misc-complete-snippets*


                                                            *misc-complete-autoclose*
                                                                        *misc-select*
                                                       *misc-select-multiple-cursors*
                                                          *misc-select-expand-region*
                                                                        *misc-format*
                                                             *misc-format-autoformat*

    noremap <F3> :Autoformat<CR>
    " au BufWrite * :Autoformat
    " let g:autoformat_autoindent = 0
    " let g:autoformat_retab = 0
    " let g:autoformat_remove_trailing_spaces = 1
    let |g:autoformat_verbosemode| = 1

    " nead install astyle
    let |g:formatdef_cxx|  = '"astyle --style=allman --pad-oper --break-blocks --pad-header --add-braces"'
    let |g:formatters_cpp| = ['cxx']
    let |go:formatters_c|   = ['cxx']

                                                             *misc-format-easy-align*
    xmap ga <Plug>(|EasyAlign|)  
        Start interactive EasyAlign in visual mode (e.g. vipga)
    
    nmap ga <Plug>(|EasyAlign|)  
        Start interactive EasyAlign for a motion/text object (e.g. gaip)
    
    vmap _  :|EasyAlig|*\<cr>
        General alignment around whitespaces
    
    vmap +  :|EasyAlign|*=<cr>
        Operators containing equals sign (=, ==, !=, +=, &&=, ...)
    
    vmap ,  :||EasyAlign||*,<cr>
        Multi-line method arguments
    
    vmap &  :|EasyAlign|*&<cr>
        LaTeX tables (matches & and \\)
    
    vmap .  :|EasyAlign|*.<cr>

                                                                       *misc-comment*
                                                            *misc-comment-commentary*

                                                                           *misc-git*
                                                                  *misc-git-gitgtter*
>
    let g:gitgutter_sign_column_always = 1
<
To change the hunk-jumping maps (defaults shown):
>
    nmap [c <Plug>GitGutterPrevHunk
    nmap ]c <Plug>GitGutterNextHunk
<

To change the hunk-staging/undoing/previewing maps (defaults shown):
>
    nmap <Leader>hs <Plug>GitGutterStageHunk
    nmap <Leader>hu <Plug>GitGutterUndoHunk
    nmap <Leader>hp <Plug>GitGutterPreviewHunk
<
    :|GitGutterDisable| 
        Explicitly turn Git Gutter off.
    
    :|GitGutterEnable|
        Explicitly turn Git Gutter on.
    
    :|GitGutterToggle|
        Explicitly turn Git Gutter on if it was off and vice versa.
    
    :|GitGutter|
        Update signs for the current buffer.

    :|GitGutterNextHunk|
        Jump to the next marked hunk.  Takes a count.

    :|GitGutterPrevHunk|
        Jump to the previous marked hunk.  Takes a count.
        Commands for staging or undoing individual hunks:

    :|GitGutterStageHunk|
        Stage the hunk the cursor is in.

    :|GitGutterUndoHunk|
        Undo the hunk the cursor is in.

                                                                  *misc-git-fugitive*
    :|Gstatus| 
        Bring up the output of git-status in the preview

    :|Gsdiff| [revision]      Like |:Gdiff|, but always split horizontally.


                                                                      *misc-git-gitv*
    Mode        Map     Description~

    normal      <cr>      Opens a commit. In browser mode this will show the
                          commit header information including the commit
                          message. It will also display a full diff showing all the
                          changes to files.

                          Tip: if you press <cr> on anything sensible you can
                          view the expected output. For example pressing <cr> on
                          the line beginning a file diff, it will display the
                          diff using Vim's built in diff viewing capability.
                          Pressing <cr> on the tree sha will list all the files
                          in the commit and pressing <cr> on one of these will
                          show that file as it was in the commit. And so on.

                          Pressing <cr> on the line "-- Load More --" will load
                          |g:Gitv_CommitStep| more commits.

                          In file mode this will open the focused file as it was
                          in the currently selected diff. This allows you to
                          easily go back in time and look at the focused file.

                          Pressing <cr> on the top line in file mode opens the
                          current working copy of the focused file.

    normal      <c-n>     In either browser or file mode, this moves down to
                          the next commit and opens it. This allows you to
                          quickly move from commit to commit and view either
                          the commit details or the file itself, depending on
                          the mode, in one action.

    normal      <c-p>     The same as <c-n> but move back a commit.

    normal      o         The same as <cr> but opens in a new |split|.
                <c-j>
    normal      O         The same as <cr> but opens in a new |tab|.
                <c-l>
    normal      s         The same as <cr> but opens in a new |vsplit|.
                <c-k>

    normal      gw         Switch between the preview window and browser.

    normal      i         This performs the same thing as <cr> in browser mode.
                <c-cr>    In file mode it opens the commit details rather than
                          the focused file. (NOTE: many terminal emulators do
                          not support <c-cr>).

    normal      q         Quits gitv. In browser mode this will close the entire
                          tab. In file mode this closes only the |preview-window|.
                          Note: in browser mode this will close the tab
                          regardless of any windows you may have opened as well
                          as the gitv windows.

                                                                        *misc-repeat*
                                                      vim:tw=78:fo=tcq2:ft=help:norl:
